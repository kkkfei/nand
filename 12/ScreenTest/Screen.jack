// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array arr;
    static Array mask;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i;

        let arr = 16384;
        let mask = Array.new(16);
        let mask[0] = 1;
        let i = 1;
        while(i < 16)
        {
            let mask[i] = mask[i-1];
            let i = i + 1;
        }

        let mask[0] = 128;
        let mask[1] = 64;
        let mask[2] = 32;
        let mask[3] = 16;
        let mask[4] = 8;
        let mask[5] = 4;
        let mask[6] = 2;
        let mask[7] = 1;

        let mask[8] = 128*256;
        let mask[9] = 64*256;
        let mask[10] = 32*256;
        let mask[11] = 16*256;
        let mask[12] = 8*256;
        let mask[13] = 4*256;
        let mask[14] = 2*256;
        let mask[15] = 1*256;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        
        let i = 0;
        while(i < (32 * 256))
        {
            let arr[i] = color;
            let i = i+1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int off;
        var int idx;

        let off = x*32 + (y/16);
        let idx = y - (16 * (y/16));

        if(color) {
            let arr[off] = arr[off] | mask[idx];
        } else 
        {
            let arr[off] = arr[off] & (~mask[idx]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
   
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
