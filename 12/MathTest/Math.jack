// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bitArr;

    /** Initializes the library. */
    function void init() {
        var int i;

        let bitArr = Array.new(16);
        let bitArr[0] = 1;
        let i = 1;
        while(i < 16) {
            let bitArr[i] = bitArr[i-1] + bitArr[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return Math.max(x, -x);
    }

    function int bit(int x, int j) {
        return (x & bitArr[j]) = bitArr[j];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int i;
        var int t;
 
        let i = 0;
        let t = x;
        while(i < 16) {
            if(Math.bit(y, i)) {
                let sum = sum + t;
            }
            let t = t + t;  
            let i = i + 1;  
        }
 
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        
        var int q;
        var boolean sign;
        var int temp;

        let sign = false;
        if(x < 0) {
            let sign = ~sign;
            let x = -x;
        }

        if(y < 0) {
            let sign = ~sign;
            let y = -y;
        }

        if(x < y) { return 0; }

        if(y+y < 0) {
           let q = 0;
        } else {
           let q = Math.divide(x, y+y);
        }
 
        let temp = q * y;
        if( (x - (temp + temp)) < y) {
            let temp = q + q;
        } else {
            let temp = q + q + 1;
        }

        if(sign) { return -temp;}
        return temp;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i;
        var int res;
        var int t;

        let i = 7;

        while(i > -1) {
            let t = res + bitArr[i];


            if(~(t * t > x)) {
                if(~(t * t < 0)) {
                    let res = t;
                }
            }
            let i = i-1;
        }
        return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b) {return a;}
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b) {return a;}
        return b;
    }
}
